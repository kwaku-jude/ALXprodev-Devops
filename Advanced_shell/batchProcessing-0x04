#!/bin/bash

# File: batchProcessing-0x04
# Objective: Speed up data retrieval using parallel processing

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Create directory for storing Pokémon data
DATA_DIR="pokemon_data"
mkdir -p "$DATA_DIR"

# Base API URL
BASE_URL="https://pokeapi.co/api/v2/pokemon"

# Array to store background process PIDs
declare -a PIDS=()

# Function to fetch a single Pokémon (runs in background)
fetch_pokemon_parallel() {
    local pokemon_name=$1
    local output_file="$DATA_DIR/${pokemon_name}.json"
    local api_url="$BASE_URL/$pokemon_name"
    local status_file="$DATA_DIR/.${pokemon_name}_status"
    
    # Remove any existing status file
    rm -f "$status_file"
    
    echo "Starting parallel fetch for $pokemon_name (PID: $$)..."
    
    # Make the API request
    if curl -s --max-time 30 "$api_url" -o "$output_file"; then
        # Verify the response is valid JSON
        if jq empty "$output_file" 2>/dev/null && jq -e '.name' "$output_file" >/dev/null 2>&1; then
            echo "SUCCESS:$pokemon_name:$output_file" > "$status_file"
            echo "✅ Completed fetch for $pokemon_name"
        else
            echo "ERROR:$pokemon_name:Invalid JSON response" > "$status_file"
            rm -f "$output_file"
            echo "❌ Failed to get valid data for $pokemon_name"
        fi
    else
        echo "ERROR:$pokemon_name:Network request failed" > "$status_file"
        echo "❌ Network error fetching $pokemon_name"
    fi
}

# Function to wait for all background processes and collect results
wait_for_completion() {
    echo "Waiting for all parallel processes to complete..."
    
    # Show active jobs
    echo "Active background jobs:"
    jobs
    echo ""
    
    # Wait for all background processes
    for pid in "${PIDS[@]}"; do
        wait "$pid"
    done
    
    echo "All parallel processes completed!"
    echo "Final job status:"
    jobs
    echo ""
    
    # Process results
    successful=0
    failed=0
    
    echo "Results Summary:"
    echo "=================="
    
    for pokemon in "${POKEMON_LIST[@]}"; do
        local status_file="$DATA_DIR/.${pokemon}_status"
        
        if [ -f "$status_file" ]; then
            local status_line=$(cat "$status_file")
            local status=$(echo "$status_line" | cut -d: -f1)
            local pokemon_name=$(echo "$status_line" | cut -d: -f2)
            local details=$(echo "$status_line" | cut -d: -f3-)
            
            if [ "$status" = "SUCCESS" ]; then
                echo "✅ $pokemon_name - Saved to $details"
                successful=$((successful + 1))
            else
                echo "❌ $pokemon_name - $details"
                failed=$((failed + 1))
            fi
            
            # Clean up status file
            rm -f "$status_file"
        else
            echo "❌ $pokemon - Unknown error (no status file)"
            failed=$((failed + 1))
        fi
    done
    
    echo ""
    echo "Final Results:"
    echo "Successful: $successful"
    echo "Failed: $failed"
    echo "Total processing time: $((SECONDS))s"
}

# Function to handle script interruption
cleanup() {
    echo ""
    echo "Script interrupted! Cleaning up background processes..."
    
    # Kill all background processes
    for pid in "${PIDS[@]}"; do
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid" 2>/dev/null
        fi
    done
    
    # Clean up status files
    rm -f "$DATA_DIR"/.* 2>/dev/null
    
    echo "Cleanup completed."
    exit 1
}

# Set up signal handling for cleanup
trap cleanup INT TERM

# Start timing
SECONDS=0

echo "Starting parallel data fetching for ${#POKEMON_LIST[@]} Pokémon..."
echo "Data will be saved to: $DATA_DIR"
echo ""

# Launch background processes for each Pokémon
for pokemon in "${POKEMON_LIST[@]}"; do
    fetch_pokemon_parallel "$pokemon" &
    PIDS+=($!)
    echo "Launched background process for $pokemon (PID: $!)"
done

echo ""
echo "All ${#POKEMON_LIST[@]} parallel processes launched!"
echo "Process PIDs: ${PIDS[*]}"
echo ""

# Wait for all processes to complete and show results
wait_for_completion